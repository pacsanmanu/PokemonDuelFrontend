{"ast":null,"code":"var _jsxFileName = \"/home/manuel/proyecto/frontend/src/components/Lobby/Lobby.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useCombat } from '../CombatContext';\nimport MenuTeam from '../MenuTeam/MenuTeam';\nimport Shop from '../Shop/Shop';\nimport CombatStarter from '../CombatStarter/CombatStarter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomePage = () => {\n  _s();\n  const [userTeam, setUserTeam] = useState([]);\n  const [evolutions, setEvolutions] = useState({});\n  const [menuTeam, setMenuTeam] = useState({});\n  const [pokemonsToBuy, setPokemonsToBuy] = useState([]);\n  const [userCoins, setUserCoins] = useState(0);\n  const [userVictories, setUserVictories] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n  const {\n    setCombatData\n  } = useCombat();\n  useEffect(() => {\n    fetchUserData();\n  }, []);\n  useEffect(() => {\n    if (!isLoading && userTeam.length === 0) {\n      navigate('/starter-selection');\n    }\n  }, [userTeam, isLoading, navigate]);\n  useEffect(() => {\n    fetchPokemonsToBuy();\n  }, [userVictories]);\n  const fetchUserData = async () => {\n    setIsLoading(true);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found, please login');\n      navigate('/login');\n      return;\n    }\n    try {\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      localStorage.setItem('userId', data._id);\n      setUserTeam(data.team || []);\n      setUserCoins(data.coins || 0);\n      setUserVictories(data.victories || 0);\n      await fetchEvolutions(data.team, token);\n    } catch (error) {\n      console.error('Failed to fetch user data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const fetchEvolutions = async (team, token) => {\n    if (!team.length) return;\n    try {\n      const evolutionResponse = await fetch(`${process.env.REACT_APP_BACKEND_URL}/pokemon/by-names`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          names: team\n        })\n      });\n      if (!evolutionResponse.ok) {\n        throw new Error('Failed to fetch Pokemon evolutions');\n      }\n      const evolutionsData = await evolutionResponse.json();\n      const evolutionCostPromises = evolutionsData.map(pokemon => {\n        if (pokemon.evolution) {\n          return fetch(`${process.env.REACT_APP_BACKEND_URL}/pokemon/evolution-cost`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n              pokemonName: pokemon.evolution\n            })\n          }).then(response => response.json().then(data => ({\n            name: pokemon.name,\n            evolution: pokemon.evolution,\n            cost: data.evolutionCost,\n            pokedexId: pokemon.pokedexId\n          })));\n        } else {\n          return Promise.resolve({\n            name: pokemon.name,\n            evolution: null,\n            cost: null,\n            pokedexId: pokemon.pokedexId\n          });\n        }\n      });\n      const evolutionsWithCost = await Promise.all(evolutionCostPromises);\n      const evolutionsMap = evolutionsWithCost.reduce((acc, item) => {\n        acc[item.name] = {\n          evolution: item.evolution,\n          cost: item.cost\n        };\n        return acc;\n      }, {});\n      const teamWithPokedexId = evolutionsWithCost.reduce((acc, item) => {\n        acc[item.name] = {\n          pokedexId: item.pokedexId\n        };\n        return acc;\n      }, {});\n      setEvolutions(evolutionsMap);\n      setMenuTeam(teamWithPokedexId);\n    } catch (error) {\n      console.error('Failed to fetch evolutions:', error);\n    }\n  };\n  const fetchPokemonsToBuy = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('Authentication information not found');\n      return;\n    }\n    try {\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/market/pokemons`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          victories: userVictories\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch Pokemons to buy');\n      }\n      const {\n        pokemons\n      } = await response.json();\n      setPokemonsToBuy(pokemons);\n    } catch (error) {\n      console.error('Failed to fetch Pokemons to buy:', error);\n    }\n  };\n  const handleBuyPokemon = async pokemonName => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found');\n      return;\n    }\n    try {\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/market/buy`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          pokemonName\n        })\n      });\n      if (!response.ok) {\n        const data = await response.json();\n        throw new Error(data.message || 'Failed to buy Pokemon');\n      }\n      const data = await response.json();\n      if (data.teamIsFull) {\n        alert(data.message);\n      } else {\n        alert(`${pokemonName} bought successfully!`);\n        fetchUserData();\n      }\n    } catch (error) {\n      console.error('Failed to buy Pokemon:', error);\n      alert(\"Not enough coins to buy the Pokemon.\");\n    }\n  };\n  const handleEvolvePokemon = async index => {\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('userId');\n    if (!token || !userId) {\n      console.error('Authentication information not found');\n      return;\n    }\n    const pokemonName = userTeam[index];\n    const evolutionInfo = evolutions[pokemonName];\n    if (!evolutionInfo || !evolutionInfo.evolution) {\n      alert('This Pokémon cannot evolve or evolution data is missing.');\n      return;\n    }\n    try {\n      const evolutionCost = evolutionInfo.cost;\n      if (userCoins >= evolutionCost) {\n        const evolveResponse = await fetch(`${process.env.REACT_APP_BACKEND_URL}/pokemon/evolve`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            userId,\n            pokemonIndex: index\n          })\n        });\n        if (!evolveResponse.ok) {\n          const errorData = await evolveResponse.json();\n          throw new Error(errorData.message || 'Failed to evolve Pokémon');\n        }\n        const evolveData = await evolveResponse.json();\n        const evolvedPokemonName = evolveData.evolvedPokemon;\n        const updatedTeam = [...userTeam];\n        updatedTeam[index] = evolvedPokemonName;\n\n        // Fetch updated evolutions and menuTeam data for the new evolved Pokémon\n        const updatedTeamWithEvolvedPokemon = await fetchEvolutions(updatedTeam, token);\n        setUserTeam(updatedTeam);\n        setUserCoins(prevCoins => prevCoins - evolutionCost);\n        alert(`Pokemon evolved to ${evolvedPokemonName}!`);\n      } else {\n        alert('Not enough coins to evolve this Pokémon');\n      }\n    } catch (error) {\n      console.error('Failed to evolve Pokémon:', error);\n      alert(error.message);\n    }\n  };\n  const handleRemovePokemon = async index => {\n    const confirmation = window.confirm(\"Are you sure you want to remove this Pokémon from your team?\");\n    if (!confirmation) {\n      return;\n    }\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('userId');\n    if (!token || !userId) {\n      console.error('Authentication information not found');\n      return;\n    }\n    try {\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/users/pokemon`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          userId,\n          pokemonIndex: index\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to remove Pokémon');\n      }\n      alert('Pokémon removed successfully!');\n      fetchUserData();\n    } catch (error) {\n      console.error('Failed to remove Pokémon:', error);\n      alert(error.message);\n    }\n  };\n  const handleStartCombat = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found, please login');\n      navigate('/login');\n      return;\n    }\n    try {\n      const aiResponse = await fetch(`${process.env.REACT_APP_BACKEND_URL}/combat/ai-team`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!aiResponse.ok) {\n        throw new Error('Failed to get AI team');\n      }\n      const {\n        aiTeam\n      } = await aiResponse.json();\n      const teamInput = JSON.stringify({\n        player: userTeam,\n        ai: aiTeam\n      });\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/combat/start`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: teamInput\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setCombatData(data);\n      navigate('/battle');\n    } catch (error) {\n      console.error('Failed to start combat:', error);\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MenuTeam, {\n      userTeam: userTeam,\n      menuTeam: menuTeam,\n      evolutions: evolutions,\n      onEvolvePokemon: handleEvolvePokemon,\n      onRemovePokemon: handleRemovePokemon,\n      userCoins: userCoins\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Shop, {\n      pokemonsToBuy: pokemonsToBuy,\n      onBuyPokemon: handleBuyPokemon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CombatStarter, {\n      onStartCombat: handleStartCombat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 319,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"/fGmFlCPQ5fVh/OQnVJQ3yoDvRs=\", false, function () {\n  return [useNavigate, useCombat];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useCombat","MenuTeam","Shop","CombatStarter","jsxDEV","_jsxDEV","HomePage","_s","userTeam","setUserTeam","evolutions","setEvolutions","menuTeam","setMenuTeam","pokemonsToBuy","setPokemonsToBuy","userCoins","setUserCoins","userVictories","setUserVictories","isLoading","setIsLoading","navigate","setCombatData","fetchUserData","length","fetchPokemonsToBuy","token","localStorage","getItem","console","error","response","fetch","process","env","REACT_APP_BACKEND_URL","method","headers","ok","Error","data","json","setItem","_id","team","coins","victories","fetchEvolutions","evolutionResponse","body","JSON","stringify","names","evolutionsData","evolutionCostPromises","map","pokemon","evolution","pokemonName","then","name","cost","evolutionCost","pokedexId","Promise","resolve","evolutionsWithCost","all","evolutionsMap","reduce","acc","item","teamWithPokedexId","pokemons","handleBuyPokemon","message","teamIsFull","alert","handleEvolvePokemon","index","userId","evolutionInfo","evolveResponse","pokemonIndex","errorData","evolveData","evolvedPokemonName","evolvedPokemon","updatedTeam","updatedTeamWithEvolvedPokemon","prevCoins","handleRemovePokemon","confirmation","window","confirm","handleStartCombat","aiResponse","aiTeam","teamInput","player","ai","children","fileName","_jsxFileName","lineNumber","columnNumber","onEvolvePokemon","onRemovePokemon","onBuyPokemon","onStartCombat","_c","$RefreshReg$"],"sources":["/home/manuel/proyecto/frontend/src/components/Lobby/Lobby.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useCombat } from '../CombatContext';\nimport MenuTeam from '../MenuTeam/MenuTeam';\nimport Shop from '../Shop/Shop';\nimport CombatStarter from '../CombatStarter/CombatStarter';\n\nconst HomePage = () => {\n  const [userTeam, setUserTeam] = useState([]);\n  const [evolutions, setEvolutions] = useState({});\n  const [menuTeam, setMenuTeam] = useState({});\n  const [pokemonsToBuy, setPokemonsToBuy] = useState([]);\n  const [userCoins, setUserCoins] = useState(0);\n  const [userVictories, setUserVictories] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n  const { setCombatData } = useCombat();\n\n  useEffect(() => {\n    fetchUserData();\n  }, []);\n\n  useEffect(() => {\n    if (!isLoading && userTeam.length === 0) {\n      navigate('/starter-selection');\n    }\n  }, [userTeam, isLoading, navigate]);\n\n  useEffect(() => {\n    fetchPokemonsToBuy();\n  }, [userVictories]);\n\n  const fetchUserData = async () => {\n    setIsLoading(true);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found, please login');\n      navigate('/login');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        },\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      localStorage.setItem('userId', data._id);\n      setUserTeam(data.team || []);\n      setUserCoins(data.coins || 0);\n      setUserVictories(data.victories || 0);\n      await fetchEvolutions(data.team, token);\n    } catch (error) {\n      console.error('Failed to fetch user data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchEvolutions = async (team, token) => {\n    if (!team.length) return;\n\n    try {\n      const evolutionResponse = await fetch(`${process.env.REACT_APP_BACKEND_URL}/pokemon/by-names`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ names: team })\n      });\n\n      if (!evolutionResponse.ok) {\n        throw new Error('Failed to fetch Pokemon evolutions');\n      }\n      const evolutionsData = await evolutionResponse.json();\n\n      const evolutionCostPromises = evolutionsData.map(pokemon => {\n        if (pokemon.evolution) {\n          return fetch(`${process.env.REACT_APP_BACKEND_URL}/pokemon/evolution-cost`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({ pokemonName: pokemon.evolution })\n          }).then(response => response.json().then(data => ({\n            name: pokemon.name,\n            evolution: pokemon.evolution,\n            cost: data.evolutionCost,\n            pokedexId: pokemon.pokedexId\n          })));\n        } else {\n          return Promise.resolve({ name: pokemon.name, evolution: null, cost: null, pokedexId: pokemon.pokedexId });\n        }\n      });\n\n      const evolutionsWithCost = await Promise.all(evolutionCostPromises);\n      const evolutionsMap = evolutionsWithCost.reduce((acc, item) => {\n        acc[item.name] = { evolution: item.evolution, cost: item.cost };\n        return acc;\n      }, {});\n\n      const teamWithPokedexId = evolutionsWithCost.reduce((acc, item) => {\n        acc[item.name] = { pokedexId: item.pokedexId };\n        return acc;\n      }, {});\n\n      setEvolutions(evolutionsMap);\n      setMenuTeam(teamWithPokedexId);\n    } catch (error) {\n      console.error('Failed to fetch evolutions:', error);\n    }\n  };\n\n  const fetchPokemonsToBuy = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('Authentication information not found');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/market/pokemons`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ victories: userVictories })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch Pokemons to buy');\n      }\n      const { pokemons } = await response.json();\n      setPokemonsToBuy(pokemons);\n    } catch (error) {\n      console.error('Failed to fetch Pokemons to buy:', error);\n    }\n  };\n\n  const handleBuyPokemon = async (pokemonName) => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/market/buy`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ pokemonName })\n      });\n      if (!response.ok) {\n        const data = await response.json();\n        throw new Error(data.message || 'Failed to buy Pokemon');\n      }\n\n      const data = await response.json();\n      if (data.teamIsFull) {\n        alert(data.message);\n      } else {\n        alert(`${pokemonName} bought successfully!`);\n        fetchUserData();\n      }\n    } catch (error) {\n      console.error('Failed to buy Pokemon:', error);\n      alert(\"Not enough coins to buy the Pokemon.\");\n    }\n  };\n\n  const handleEvolvePokemon = async (index) => {\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('userId');\n    if (!token || !userId) {\n      console.error('Authentication information not found');\n      return;\n    }\n\n    const pokemonName = userTeam[index];\n    const evolutionInfo = evolutions[pokemonName];\n    if (!evolutionInfo || !evolutionInfo.evolution) {\n      alert('This Pokémon cannot evolve or evolution data is missing.');\n      return;\n    }\n\n    try {\n      const evolutionCost = evolutionInfo.cost;\n      if (userCoins >= evolutionCost) {\n        const evolveResponse = await fetch(`${process.env.REACT_APP_BACKEND_URL}/pokemon/evolve`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({ userId, pokemonIndex: index }),\n        });\n\n        if (!evolveResponse.ok) {\n          const errorData = await evolveResponse.json();\n          throw new Error(errorData.message || 'Failed to evolve Pokémon');\n        }\n\n        const evolveData = await evolveResponse.json();\n        const evolvedPokemonName = evolveData.evolvedPokemon;\n\n        const updatedTeam = [...userTeam];\n        updatedTeam[index] = evolvedPokemonName;\n\n        // Fetch updated evolutions and menuTeam data for the new evolved Pokémon\n        const updatedTeamWithEvolvedPokemon = await fetchEvolutions(updatedTeam, token);\n\n        setUserTeam(updatedTeam);\n        setUserCoins(prevCoins => prevCoins - evolutionCost);\n        alert(`Pokemon evolved to ${evolvedPokemonName}!`);\n      } else {\n        alert('Not enough coins to evolve this Pokémon');\n      }\n    } catch (error) {\n      console.error('Failed to evolve Pokémon:', error);\n      alert(error.message);\n    }\n  };\n\n  const handleRemovePokemon = async (index) => {\n    const confirmation = window.confirm(\"Are you sure you want to remove this Pokémon from your team?\");\n    if (!confirmation) {\n      return;\n    }\n\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('userId');\n    if (!token || !userId) {\n      console.error('Authentication information not found');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/users/pokemon`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ userId, pokemonIndex: index }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to remove Pokémon');\n      }\n      alert('Pokémon removed successfully!');\n      fetchUserData();\n    } catch (error) {\n      console.error('Failed to remove Pokémon:', error);\n      alert(error.message);\n    }\n  };\n\n  const handleStartCombat = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found, please login');\n      navigate('/login');\n      return;\n    }\n\n    try {\n      const aiResponse = await fetch(`${process.env.REACT_APP_BACKEND_URL}/combat/ai-team`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (!aiResponse.ok) {\n        throw new Error('Failed to get AI team');\n      }\n\n      const { aiTeam } = await aiResponse.json();\n      const teamInput = JSON.stringify({\n        player: userTeam,\n        ai: aiTeam\n      });\n\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/combat/start`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: teamInput\n      });\n\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n\n      const data = await response.json();\n      setCombatData(data);\n      navigate('/battle');\n    } catch (error) {\n      console.error('Failed to start combat:', error);\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <MenuTeam\n        userTeam={userTeam}\n        menuTeam={menuTeam}\n        evolutions={evolutions}\n        onEvolvePokemon={handleEvolvePokemon}\n        onRemovePokemon={handleRemovePokemon}\n        userCoins={userCoins}\n      />\n      <Shop\n        pokemonsToBuy={pokemonsToBuy}\n        onBuyPokemon={handleBuyPokemon}\n      />\n      <CombatStarter onStartCombat={handleStartCombat} />\n    </div>\n  );\n}\n\nexport default HomePage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/mpacheco/Github/ProjectFrontend/src/components/BattleArena.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PokemonDetails from './PokemonDetails';\nimport TeamDisplay from './TeamDisplay';\nimport ':/BattleArena.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BattleArena = ({\n  combatData\n}) => {\n  _s();\n  const [combatState, setCombatState] = useState({\n    combatId: null,\n    userStatus: null,\n    aiStatus: null,\n    userTeam: [],\n    aiTeam: []\n  });\n  useEffect(() => {\n    // Establecer el estado inicial con los datos pasados desde App\n    if (combatData) {\n      setCombatState({\n        combatId: combatData.combatId,\n        userStatus: combatData.playerPokemons[0],\n        // Asumiendo que el primer Pokémon es el activo\n        aiStatus: combatData.aiPokemons[0],\n        // Asumiendo que el primer Pokémon es el activo\n        userTeam: combatData.playerPokemons,\n        aiTeam: combatData.aiPokemons\n      });\n    }\n  }, [combatData]); // Dependencia de combatData para que se ejecute el efecto cuando cambie\n\n  // Función para manejar el ataque del Pokémon del usuario\n  const handleAttack = async moveIndex => {\n    try {\n      const response = await fetch('http://localhost:3000/combat/attack', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          combatId: combatState.combatId,\n          moveIndex\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      // Asumiendo que la respuesta del backend tiene la misma estructura que la inicial\n      updateCombatState(data);\n    } catch (error) {\n      console.error('Failed to execute attack:', error);\n    }\n  };\n\n  // Función para manejar el cambio de Pokémon del usuario\n  const handleChangePokemon = async pokemonName => {\n    try {\n      const response = await fetch('http://localhost:3000/combat/change', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          combatId: combatState.combatId,\n          pokemonName\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      // Asumiendo que la respuesta del backend tiene la misma estructura que la inicial\n      updateCombatState(data);\n    } catch (error) {\n      console.error('Failed to change Pokémon:', error);\n    }\n  };\n  const updateCombatState = data => {\n    setCombatState({\n      combatId: data.result.combatId,\n      userStatus: data.result.userStatus,\n      aiStatus: data.result.aiStatus,\n      userTeam: data.result.userTeam,\n      aiTeam: data.result.aiTeam\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [combatState.userStatus && /*#__PURE__*/_jsxDEV(PokemonDetails, {\n      role: \"user\",\n      pokemon: combatState.userStatus,\n      onAttack: handleAttack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), combatState.aiStatus && /*#__PURE__*/_jsxDEV(PokemonDetails, {\n      role: \"ai\",\n      pokemon: combatState.aiStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TeamDisplay, {\n      team: combatState.userTeam,\n      onChangePokemon: handleChangePokemon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(BattleArena, \"7hfIh1TLPYS//DfH5liSTZDtCRM=\");\n_c = BattleArena;\nexport default BattleArena;\nvar _c;\n$RefreshReg$(_c, \"BattleArena\");","map":{"version":3,"names":["React","useState","useEffect","PokemonDetails","TeamDisplay","jsxDEV","_jsxDEV","BattleArena","combatData","_s","combatState","setCombatState","combatId","userStatus","aiStatus","userTeam","aiTeam","playerPokemons","aiPokemons","handleAttack","moveIndex","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","updateCombatState","error","console","handleChangePokemon","pokemonName","result","children","role","pokemon","onAttack","fileName","_jsxFileName","lineNumber","columnNumber","team","onChangePokemon","_c","$RefreshReg$"],"sources":["/home/mpacheco/Github/ProjectFrontend/src/components/BattleArena.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PokemonDetails from './PokemonDetails';\nimport TeamDisplay from './TeamDisplay';\nimport ':/BattleArena.css';\n\nconst BattleArena = ({ combatData }) => {\n  const [combatState, setCombatState] = useState({\n    combatId: null,\n    userStatus: null,\n    aiStatus: null,\n    userTeam: [],\n    aiTeam: []\n  });\n\n  useEffect(() => {\n    // Establecer el estado inicial con los datos pasados desde App\n    if (combatData) {\n      setCombatState({\n        combatId: combatData.combatId,\n        userStatus: combatData.playerPokemons[0], // Asumiendo que el primer Pokémon es el activo\n        aiStatus: combatData.aiPokemons[0], // Asumiendo que el primer Pokémon es el activo\n        userTeam: combatData.playerPokemons,\n        aiTeam: combatData.aiPokemons\n      });\n    }\n  }, [combatData]); // Dependencia de combatData para que se ejecute el efecto cuando cambie\n\n  // Función para manejar el ataque del Pokémon del usuario\n  const handleAttack = async (moveIndex) => {\n    try {\n      const response = await fetch('http://localhost:3000/combat/attack', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ combatId: combatState.combatId, moveIndex })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      // Asumiendo que la respuesta del backend tiene la misma estructura que la inicial\n      updateCombatState(data);\n    } catch (error) {\n      console.error('Failed to execute attack:', error);\n    }\n  };\n\n  // Función para manejar el cambio de Pokémon del usuario\n  const handleChangePokemon = async (pokemonName) => {\n    try {\n      const response = await fetch('http://localhost:3000/combat/change', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ combatId: combatState.combatId, pokemonName })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      // Asumiendo que la respuesta del backend tiene la misma estructura que la inicial\n      updateCombatState(data);\n    } catch (error) {\n      console.error('Failed to change Pokémon:', error);\n    }\n  };\n\n  const updateCombatState = (data) => {\n    setCombatState({\n      combatId: data.result.combatId,\n      userStatus: data.result.userStatus,\n      aiStatus: data.result.aiStatus,\n      userTeam: data.result.userTeam,\n      aiTeam: data.result.aiTeam,\n    });\n  };\n\n  return (\n    <div>\n      {combatState.userStatus && (\n        <PokemonDetails\n          role=\"user\"\n          pokemon={combatState.userStatus}\n          onAttack={handleAttack}\n        />\n      )}\n      {combatState.aiStatus && (\n        <PokemonDetails\n          role=\"ai\"\n          pokemon={combatState.aiStatus}\n        />\n      )}\n      <TeamDisplay\n        team={combatState.userTeam}\n        onChangePokemon={handleChangePokemon}\n      />\n    </div>\n  );\n};\n\nexport default BattleArena;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC;IAC7CW,QAAQ,EAAE,IAAI;IACdC,UAAU,EAAE,IAAI;IAChBC,QAAQ,EAAE,IAAI;IACdC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE;EACV,CAAC,CAAC;EAEFd,SAAS,CAAC,MAAM;IACd;IACA,IAAIM,UAAU,EAAE;MACdG,cAAc,CAAC;QACbC,QAAQ,EAAEJ,UAAU,CAACI,QAAQ;QAC7BC,UAAU,EAAEL,UAAU,CAACS,cAAc,CAAC,CAAC,CAAC;QAAE;QAC1CH,QAAQ,EAAEN,UAAU,CAACU,UAAU,CAAC,CAAC,CAAC;QAAE;QACpCH,QAAQ,EAAEP,UAAU,CAACS,cAAc;QACnCD,MAAM,EAAER,UAAU,CAACU;MACrB,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACV,UAAU,CAAC,CAAC,CAAC,CAAC;;EAElB;EACA,MAAMW,YAAY,GAAG,MAAOC,SAAS,IAAK;IACxC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEf,QAAQ,EAAEF,WAAW,CAACE,QAAQ;UAAEQ;QAAU,CAAC;MACpE,CAAC,CAAC;MACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC;MACAC,iBAAiB,CAACF,IAAI,CAAC;IACzB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;;EAED;EACA,MAAME,mBAAmB,GAAG,MAAOC,WAAW,IAAK;IACjD,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEf,QAAQ,EAAEF,WAAW,CAACE,QAAQ;UAAEwB;QAAY,CAAC;MACtE,CAAC,CAAC;MACF,IAAI,CAACf,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC;MACAC,iBAAiB,CAACF,IAAI,CAAC;IACzB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,MAAMD,iBAAiB,GAAIF,IAAI,IAAK;IAClCnB,cAAc,CAAC;MACbC,QAAQ,EAAEkB,IAAI,CAACO,MAAM,CAACzB,QAAQ;MAC9BC,UAAU,EAAEiB,IAAI,CAACO,MAAM,CAACxB,UAAU;MAClCC,QAAQ,EAAEgB,IAAI,CAACO,MAAM,CAACvB,QAAQ;MAC9BC,QAAQ,EAAEe,IAAI,CAACO,MAAM,CAACtB,QAAQ;MAC9BC,MAAM,EAAEc,IAAI,CAACO,MAAM,CAACrB;IACtB,CAAC,CAAC;EACJ,CAAC;EAED,oBACEV,OAAA;IAAAgC,QAAA,GACG5B,WAAW,CAACG,UAAU,iBACrBP,OAAA,CAACH,cAAc;MACboC,IAAI,EAAC,MAAM;MACXC,OAAO,EAAE9B,WAAW,CAACG,UAAW;MAChC4B,QAAQ,EAAEtB;IAAa;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CACF,EACAnC,WAAW,CAACI,QAAQ,iBACnBR,OAAA,CAACH,cAAc;MACboC,IAAI,EAAC,IAAI;MACTC,OAAO,EAAE9B,WAAW,CAACI;IAAS;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CACF,eACDvC,OAAA,CAACF,WAAW;MACV0C,IAAI,EAAEpC,WAAW,CAACK,QAAS;MAC3BgC,eAAe,EAAEZ;IAAoB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACpC,EAAA,CA3FIF,WAAW;AAAAyC,EAAA,GAAXzC,WAAW;AA6FjB,eAAeA,WAAW;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}